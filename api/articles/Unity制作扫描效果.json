{"title":"Unity制作扫描效果","slug":"Unity制作扫描效果","date":"2020-04-21T10:33:08.000Z","updated":"2020-05-21T13:21:29.072Z","comments":true,"path":"api/articles/Unity制作扫描效果.json","photos":[],"link":"","excerpt":null,"covers":["../image/scan.gif"],"content":"<p>一个笔试中遇到的题目，完成一个以主角为中心的扫描效果。下图是我完成的效果图。<br><img src=\"../image/scan.gif\" alt=\"扫描\"><br>主要功能是按下v键，以场景中的角色或者摄像机为中心发出扫描圈，路过的有效目标被高亮且透视。使用了三个脚本和一个Shader完成效果。</p>\n<h1 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h1><p>实现思路是ScanCenter脚本监测按键，并且完成切换摄像机和判断是否激活或者重置扫描器。激活的过程中将此脚本所在Object的世界坐标传入扫描器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Update()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (Input.GetKeyDown(KeyCode.V))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    if (scanCamera.enabled == false)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mainCamera.enabled = false;</span><br><span class=\"line\">        scanCamera.enabled = true;</span><br><span class=\"line\">        Scanner.CallScan(transform.position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        mainCamera.enabled = true;</span><br><span class=\"line\">        scanCamera.enabled = false;</span><br><span class=\"line\">        Scanner.reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Target脚本实现目标材质和高亮材质的切换。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void highlight()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">rend.material = targetMaterial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//重置材质</span><br><span class=\"line\">public void recover()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">rend.material = baseMaterial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">rend = GetComponent&lt;Renderer&gt;();</span><br><span class=\"line\">rend.enabled = true;</span><br><span class=\"line\">baseMaterial = rend.materials[0];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Scanner脚本用于获取摄像机的深度+法线纹理，并且计算指向摄像机的四个角的向量，传入Shader。这个部分在冯乐乐的《Unity Shader入门级精要》中全局雾效的部分有详细说明。Shader获取到向量后。再经过计算反推出片元所在的世界坐标。<br>以下是计算指向摄像机近裁/远裁平面四个角的归一向量的计算方式，计算结果由四维矩阵_FrustumCorners传入Shader：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//传入着色器的属性</span><br><span class=\"line\">material.SetVector(&quot;_WorldSpaceScannerPos&quot;, scanPosition);</span><br><span class=\"line\">material.SetFloat(&quot;_ScanDistance&quot;, ScanDistance);</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix4x4 frustumCorners = Matrix4x4.identity;</span><br><span class=\"line\"></span><br><span class=\"line\">//计算摄像机指向摄像机空间四个角的归一化向量</span><br><span class=\"line\">float camFar = _camera.farClipPlane;</span><br><span class=\"line\">float camFov = _camera.fieldOfView;</span><br><span class=\"line\">float camAspect = _camera.aspect;</span><br><span class=\"line\"></span><br><span class=\"line\">float fovWHalf = camFov * 0.5f;</span><br><span class=\"line\"></span><br><span class=\"line\">Vector3 toRight = _camera.transform.right * Mathf.Tan(fovWHalf * Mathf.Deg2Rad) * camAspect;</span><br><span class=\"line\">Vector3 toTop = _camera.transform.up * Mathf.Tan(fovWHalf * Mathf.Deg2Rad);</span><br><span class=\"line\"></span><br><span class=\"line\">Vector3 topLeft = (_camera.transform.forward - toRight + toTop);</span><br><span class=\"line\">float camScale = topLeft.magnitude * camFar;</span><br><span class=\"line\"></span><br><span class=\"line\">topLeft.Normalize();</span><br><span class=\"line\">topLeft *= camScale;</span><br><span class=\"line\"></span><br><span class=\"line\">Vector3 topRight = (_camera.transform.forward + toRight + toTop);</span><br><span class=\"line\">topRight.Normalize();</span><br><span class=\"line\">topRight *= camScale;</span><br><span class=\"line\"></span><br><span class=\"line\">Vector3 bottomRight = (_camera.transform.forward + toRight - toTop);</span><br><span class=\"line\">bottomRight.Normalize();</span><br><span class=\"line\">bottomRight *= camScale;</span><br><span class=\"line\"></span><br><span class=\"line\">Vector3 bottomLeft = (_camera.transform.forward - toRight - toTop);</span><br><span class=\"line\">bottomLeft.Normalize();</span><br><span class=\"line\">bottomLeft *= camScale;</span><br><span class=\"line\"></span><br><span class=\"line\">frustumCorners.SetRow(0, topLeft);</span><br><span class=\"line\">frustumCorners.SetRow(1, topRight);</span><br><span class=\"line\">frustumCorners.SetRow(2, bottomRight);</span><br><span class=\"line\">frustumCorners.SetRow(3, bottomLeft);</span><br><span class=\"line\">material.SetMatrix(&quot;_FrustumCorners&quot;, frustumCorners);</span><br></pre></td></tr></table></figure></p>\n<p>自定义一个GraphicsBlit让Shader可以通过索引访问该矩阵以求出interpolatedRay，也就是摄像机指向顶点的方向向量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义 GraphicsBlit, 将上文四个角设置为顶点的z轴索引，shader中直接提取顶点的vertex.z就可以得到索引。</span><br><span class=\"line\">material.SetTexture(&quot;_MainTex&quot;, source);</span><br><span class=\"line\">RenderTexture.active = dest;</span><br><span class=\"line\"></span><br><span class=\"line\">GL.PushMatrix();</span><br><span class=\"line\">GL.LoadOrtho();</span><br><span class=\"line\"></span><br><span class=\"line\">material.SetPass(0);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.Begin(GL.QUADS);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.MultiTexCoord2(0, 0.0f, 0.0f);</span><br><span class=\"line\">GL.Vertex3(0.0f, 0.0f, 3.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.MultiTexCoord2(0, 1.0f, 0.0f);</span><br><span class=\"line\">GL.Vertex3(1.0f, 0.0f, 2.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.MultiTexCoord2(0, 1.0f, 1.0f);</span><br><span class=\"line\">GL.Vertex3(1.0f, 1.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.MultiTexCoord2(0, 0.0f, 1.0f);</span><br><span class=\"line\">GL.Vertex3(0.0f, 1.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">GL.End();</span><br><span class=\"line\">GL.PopMatrix();</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Shader\"><a href=\"#Shader\" class=\"headerlink\" title=\"Shader\"></a>Shader</h1><p>Shader主要用于使用Scanner脚本传入的参数反推片元世界坐标并用图片纹理作出扫描效果（一维纹理）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v2f vert(input v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">v2f o;</span><br><span class=\"line\">half index = v.vertex.z;</span><br><span class=\"line\">v.vertex.z = 0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class=\"line\">o.uv = v.uv.xy;</span><br><span class=\"line\">o.uv_depth = v.uv.xy;</span><br><span class=\"line\"></span><br><span class=\"line\">#if UNITY_UV_STARTS_AT_TOP</span><br><span class=\"line\">if (_MainTex_TexelSize.y &lt; 0)</span><br><span class=\"line\">    o.uv.y = 1 - o.uv.y;</span><br><span class=\"line\">#endif              </span><br><span class=\"line\"></span><br><span class=\"line\">o.interpolatedRay = _FrustumCorners[(int)index];</span><br><span class=\"line\"></span><br><span class=\"line\">return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">half4 frag (v2f i) : SV_Target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">half4 col = tex2D(_MainTex, i.uv);</span><br><span class=\"line\">//获取深度值并且反推出像素点的世界坐标</span><br><span class=\"line\">float linearDepth = Linear01Depth(DecodeFloatRG(tex2D(_CameraDepthTexture, i.uv_depth)));</span><br><span class=\"line\">float3 worldPos = _WorldSpaceCameraPos + (linearDepth * i.interpolatedRay.xyz);</span><br><span class=\"line\"></span><br><span class=\"line\">half4 sc = half4(0, 0, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">//扫描特效</span><br><span class=\"line\">float dist = distance(worldPos, _WorldSpaceScannerPos);</span><br><span class=\"line\">if (dist &lt; _ScanDistance &amp;&amp; dist &gt; _ScanDistance - _ScanWidth &amp;&amp; linearDepth &lt; 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float diff = 1 - (_ScanDistance - dist) / (_ScanWidth);</span><br><span class=\"line\">    sc =  tex2D(_ScanTex, float2(diff,diff));</span><br><span class=\"line\">    sc = _ScanColor*sc.a*_Alpha;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return col + sc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Shader的顶点着色器中计算出interpolatedRay作为摄像机指向顶点的方向向量传入片元着色器。片元着色器将interpolatedRay和摄像机深度纹理采集到的深度值相乘获得摄像机指向片元的向量，加上摄像机坐标及是片元的位置坐标。<br>得到位置坐标即可判断是否有扫描特效。</p>\n","categories":[],"tags":[]}